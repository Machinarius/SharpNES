namespace SharpNES.Core.CPU {
  // All of these functions return true in scenarios
  // they need an additional theoretical cycle
  public interface ICpuInstructionExecutor {
    // ADC
    bool AddWithCarry();
    // AND
    bool AndWithAccumulator();
    // ASL
    bool ArithmeticShiftLeft();
    // BCC
    bool BranchOnCarryClear();
    // BCS
    bool BranchOnCarrySet();
    // BEQ
    bool BranchOnEqual();
    // BIT
    bool BitTest();
    // BMI
    bool BranchOnMinus();
    // BNE
    bool BranchOnNotEqual();
    // BPL
    bool BranchOnPlus();
    // BRK
    bool BreakInterrupt();
    // BVC
    bool BranchOnOverflowClear();
    // BVS
    bool BranchOnOverflowSet();
    // CLC
    bool ClearCarry();
    // CLD
    bool ClearDecimal();
    // CLI
    bool ClearInterruptDisable();
    // CLV
    bool ClearOverflow();
    // CMP
    bool CompareWithAccumulator();
    // CPX
    bool CompareWithX();
    // CPY
    bool CompareWithY();
    // DEC
    bool Decrement();
    // DEX
    bool DecrementX();
    // DEY
    bool DecrementY();
    // EOR
    bool ExclusiveOr();
    // INC
    bool Increment();
    // INX
    bool IncrementX();
    // INY
    bool IncrementY();
    // JMP
    bool Jump();
    // JSR
    bool JumpSubRoutine();
    // LDA
    bool LoadAccumulator();
    // LDX
    bool LoadX();
    // LDY
    bool LoadY();
    // LSR
    bool LogicalShiftRight();
    // NOP
    bool NoOperation();
    // ORA
    bool OrWithAccumulator();
    // PHA
    bool PushAccumulator();
    // PHP
    bool PushProcessorStatus();
    // PLA
    bool PullAccumulator();
    // PLP
    bool PullProcessorStatus();
    // ROL
    bool RotateLeft();
    // ROR
    bool RotateRight();
    // RTI
    bool ReturnFromInterrupt();
    // RTS
    bool ReturnFromSubroutine();
    // SBC
    bool SubtractWithCarry();
    // SEC
    bool SetCarry();
    // SED
    bool SetDecimal();
    // SEI
    bool SetInterruptDisable();
    // STA
    bool StoreAccumulator();
    // STX
    bool StoreX();
    // STY
    bool StoreY();
    // TAX
    bool TransferAccumulatorToX();
    // TAY
    bool TransferAccumulatorToY();
    // TSX
    bool TransferStackPointerToX();
    // TXA
    bool TransferXToAccumulator();
    // TXS
    bool TransferXToStackPointer();
    // TYA
    bool TransferYToAccumulator();
    // XXX
    bool IllegalOpCode();
  }
}
