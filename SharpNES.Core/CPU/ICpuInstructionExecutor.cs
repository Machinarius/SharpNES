namespace SharpNES.Core.CPU {
  // All of these functions return true in scenarios
  // they need an additional theoretical cycle
  public interface ICpuInstructionExecutor {
    // ADC
    int AddWithCarry();
    // AND
    int AndWithAccumulator();
    // ASL
    int ArithmeticShiftLeft();
    // BCC
    int BranchOnCarryClear();
    // BCS
    int BranchOnCarrySet();
    // BEQ
    int BranchOnEqual();
    // BIT
    int BitTest();
    // BMI
    int BranchOnMinus();
    // BNE
    int BranchOnNotEqual();
    // BPL
    int BranchOnPlus();
    // BRK
    int BreakInterrupt();
    // BVC
    int BranchOnOverflowClear();
    // BVS
    int BranchOnOverflowSet();
    // CLC
    int ClearCarry();
    // CLD
    int ClearDecimal();
    // CLI
    int ClearInterruptDisable();
    // CLV
    int ClearOverflow();
    // CMP
    int CompareWithAccumulator();
    // CPX
    int CompareWithX();
    // CPY
    int CompareWithY();
    // DEC
    int Decrement();
    // DEX
    int DecrementX();
    // DEY
    int DecrementY();
    // EOR
    int ExclusiveOr();
    // INC
    int Increment();
    // INX
    int IncrementX();
    // INY
    int IncrementY();
    // JMP
    int Jump();
    // JSR
    int JumpSubRoutine();
    // LDA
    int LoadAccumulator();
    // LDX
    int LoadX();
    // LDY
    int LoadY();
    // LSR
    int LogicalShiftRight();
    // NOP
    int NoOperation();
    // ORA
    int OrWithAccumulator();
    // PHA
    int PushAccumulator();
    // PHP
    int PushProcessorStatus();
    // PLA
    int PullAccumulator();
    // PLP
    int PullProcessorStatus();
    // ROL
    int RotateLeft();
    // ROR
    int RotateRight();
    // RTI
    int ReturnFromInterrupt();
    // RTS
    int ReturnFromSubroutine();
    // SBC
    int SubtractWithCarry();
    // SEC
    int SetCarry();
    // SED
    int SetDecimal();
    // SEI
    int SetInterruptDisable();
    // STA
    int StoreAccumulator();
    // STX
    int StoreX();
    // STY
    int StoreY();
    // TAX
    int TransferAccumulatorToX();
    // TAY
    int TransferAccumulatorToY();
    // TSX
    int TransferStackPointerToX();
    // TXA
    int TransferXToAccumulator();
    // TXS
    int TransferXToStackPointer();
    // TYA
    int TransferYToAccumulator();
    // XXX
    int IllegalOpCode();
  }
}
